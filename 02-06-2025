class Solution {
  public:
    int backtrack(int i, int j, int n, int m, vector<vector<int>>& grid, vector<vector<int>>& dp) {
        if (i==(n-1)&&j==(m-1)) return 1;
        if (i>(n-1)||j>(m-1)||grid[i][j]==1) return 0;
        if (dp[i][j]!=-1) return dp[i][j];
        return dp[i][j] = backtrack(i+1, j, n, m, grid, dp) + backtrack(i, j+1, n, m, grid, dp);
    }
    int uniquePaths(vector<vector<int>> &grid) {
        // code here
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        if (grid[0][0]==1 || grid[n-1][m-1]==1) return 0;
        return backtrack(0, 0, n, m, grid, dp);
    }
};
